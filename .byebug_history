c
pp ENV
PP ENV
ENV['DATABASE_URL']
ENV
c
	@blog = Blog.find(params[:id])
params
c
@blogs ||= blogs
blogs
@blogs
params
c
params
c
params
c
params
c
@weather
c
@weather = weather_data['weather'].first["main"]
@weather = weather_data['weather'].first
@weather = weather_data['weather']
@weather = weather_data['weather']['main']
weather_data['weather']
weather_data['main']['temp']
weather_data = JSON.parse(response.body)
 response.code
c
weather_data['main']['temp']
weather_data = JSON.parse(response.body)
response.code 
response
c
user.errors
c
user.errors
c
tournament
c
params
c
params
c
tournament
c
tournament
params
c
wl = ((Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
(match.winner == (Registration.find(match.winner).user.id == current_user.id  ))
(match.winner == (Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
current_user.id
Registration.find(match.winner).user.id
match.winner
wl = (match.winner == (Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
c
wl = (match.winner == (Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
c
Registration.find(match.second_player).user.id
Registration.find(match.first_player).user.id
match
c
params
c
!(current_user.id.to_s == params[:id])
!current_user.admin?
!current_user.admin? || !(current_user.id.to_s == params[:id])
c
!current_user.admin? || !(current_user.id.to_s == params[:id])
current_user.admin? || current_user.id.to_s == params[:id]
c
params
c
match.date&.strftime('%d-%m-%Y %H:%M')
match
match.id
c
match.id
c
match.id
c
match.errors
match.erros
c
match.errors
c
@duels
c
@duels
c
@duels
c
@duels
c
current_user
opponent
	@duels
c
params
debugger
c
Registration
params[:level]
params
c
team_is_existed = (Registration.find_by(tournament: tournament, user_id: current_user.id) rescue false) || (Registration.find_by(tournament: tournament, user_id: @teammate.id) rescue false) || (Registration.find_by(tournament: tournament, teammate_id: @teammate.id) rescue false) || (Registration.find_by(tournament: tournament, teammate_id: current_user.id) rescue false)
Registration.find
Registration
Registration.find(tournament_id: 107, teammate_id: current_user.id)
pp Registration.last
tournament
pp Registration.last(2)
Registration.last
Registration.find( teammate_id: current_user.id)
current_user
Registration.find(tournament: tournament, teammate_id: current_user.id)
pp Registration.last(2)
Registration.last
Regsitration.last
Registration.find(tournament: tournament, teammate_id: @teammate.id) rescue false
Registration.find(tournament: tournament, teammate_id: @teammate.id) rescue fals
Registration.find(tournament: tournament, user_id: current_user.id) rescue false
Registration.find(tournament: tournament, user_id: current_user.id) rescue false)
c
team_is_existed = (Registration.find(tournament: tournament, user_id: current_user.id) rescue false) || (Registration.find(tournament: tournament, user_id: @teammate.id) rescue false) || (Registration.find(tournament: tournament, teammate_id: @teammate.id) rescue false) || (Registration.find(tournament: tournament, teammate_id: current_user.id) rescue false)
c
team_is_existed = (Registration.find(tournament: tournament, user_id: current_user.id) rescue false) || (Registration.find(tournament: tournament, user_id: @teammate.id) rescue false)
c
team_is_existed = (Registration.find(tournament: tournament, user_id: current_user.id) rescue false) || (Registration.find(tournament: tournament, user_id: @teammate.id) rescue false)
c
(Registration.find(tournament: tournament, user_id: current_user.id) rescue false)
Registration.find(tournament: tournament, user_id: @teammate.id)
Registration.find(tournament: tournament, user_id: current_user.id)
@teammate
@team_name
c
@registrations_from_user
@registrations_current_user
@registrations_current_user + @registrations_from_user
c
Registration.where(teammate_id: current_user.id, double: true)
@registrations_current_user 
c
Registration.find(541)
params
c
	@registration_double
c
	@registration_double.errors
c
@registration_double
c
@team_name = current_user.username + " "+ @teammate.username
@team_name = #{current_user.username} + " "+ #{@teammate.username}
@teammate = User.find(params[:user_id])
User.find(params[:user_id])
@teammate
current_user.username + " "+ @teammate.username
@team_name = #{current_user.username} + " "+ #{@teammate.username}
c
@registration_double
c
params
c
params
c
params
c
tournament_presenter.tournament.double
c
tournament_presenter.tournament.double
c
params
c
@matches_for_current_user.size
c@matches_for_current_user
c
match
c
#{r}_users_path
if params[:level] == "Beginner"
			r = "beginner"
		elsif params[:level] == "Medium"
			r = "medium"
		elsif params[:level] == "Medium Plus"
			r = "medium_plus"
		else
			r = "expert"
		end
params
c
pp @data
c
pp @data
c
pp @data
c
pp @data
c
pp @data
c
@data = @data.sort_by do |group_id, players_data|
			[
				-players_data.values.sum { |data| data[:matches_won] },
				-players_data.values.sum { |data| data[:sets_won] }
			]
		end.to_h
pp @data
c
cc
c
pp @data
@data
c
pp @data
@data
c
cc
c
@data[group.id][winner_id]
loser_id
winner_id
c
@data
c
@data[group.id][winner_id]
 @data[group.id][winner_id] && @data[group.id][opponent_id]
sets
player_score, opponent_score = set.split('-').map(&:to_i)
c
@data
c
@data
c
@data
c
@data
sets
c
@data
c
@data
c
match
c
match.score
match
sets
@data
c
@data
c
@data
