c
resource.errors.full_messages
c
resource.errors.full_messages
c
resource.errors.full_messages
c
params[:rounds_submit]
params
c
params
 params[:rounds_submit]
c
cc
c
tournament
c
params
c
params[:group_id].present? && params[:first_player].present? && params[:second_player].present?
c
group.level
tournament.registrations.where(user_id: params[:first_player]).first
registrations_first
tournament
group
c
Registration.find(646)
Registration.find(647)
registrations_second
registrations_first
c
group
tournament
c
x
c
params
c
users = User.where(id: regs[0])
regs
c
users = Registration.where(id: regs).users
users = Registration.where(id: regs)
users = Registration.where(id: regs).user.username
regs
c
params
c
exit
groups = Tournament.find(params[:id]).groups.pluck(:id)
groups
c
params
c
params
c
	macthes.delete_all if matches.present?
	matches = Match.where(first_player: regs)
regs
c
	macthes.delete_all
matches = Match.where(first_player: regs)
retgs
 @user.registrations.pluck(:id)
@user.registrations
@user
reregs
c
@user
c
@users.size
c
current_status
c
params
c
params
c
tournament.double
tournament
c
params[:selected_players]&.length
params[:selected_players]
c
@tournament.double
@tournament
tournament
c
pp Registration.all
c
pp Registration.all
 Registration.find(id)
user_id
id
c
exit
	@pagy, @matches_for_current_user = pagy(Match.for_current_user(current_user), items: 13)
c
params[:selected_players]&.length || 0
params[:selected_players]&.length
params[:selected_players]&.length || 0 < 2
params[:selected_players]&.length || 0
c
params[:selected_players]&.length || 0 < 2
params[:selected_players].length || 0 < 2
c
params[:selected_players]
params[:selected_players].length
exit
tournament
c
params[:id]
params
c
params
c
params
paparams
c
checking.empty?
reg_seed.length < 2 || checking.empty?
c
players
c
	shuffled_players = players.shuffle
players
players.length 
c
Registration.find(reg_seed.first.first.to_i).level_registration
reg_seed.first.first
reg_seed.first
reg_seed
c
reg_seed.length
reg_seed
c
permitted_selected_players = params.permit(selected_players: {})
permitted_selected_players = params.permit(selected_players: {})permitted_selected_players = params.permit(selected_players: {})permitted_selected_players = params.permit(selected_players: {})permitted_selected_players = params.permit(selected_players: {})rr
c
players
c
shuffled_players = players.shuffle
players
c
pp ENV
PP ENV
ENV['DATABASE_URL']
ENV
c
	@blog = Blog.find(params[:id])
params
c
@blogs ||= blogs
blogs
@blogs
params
c
params
c
params
c
params
c
@weather
c
@weather = weather_data['weather'].first["main"]
@weather = weather_data['weather'].first
@weather = weather_data['weather']
@weather = weather_data['weather']['main']
weather_data['weather']
weather_data['main']['temp']
weather_data = JSON.parse(response.body)
 response.code
c
weather_data['main']['temp']
weather_data = JSON.parse(response.body)
response.code 
response
c
user.errors
c
user.errors
c
tournament
c
params
c
params
c
tournament
c
tournament
params
c
wl = ((Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
(match.winner == (Registration.find(match.winner).user.id == current_user.id  ))
(match.winner == (Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
current_user.id
Registration.find(match.winner).user.id
match.winner
wl = (match.winner == (Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
c
wl = (match.winner == (Registration.find(match.winner).user.id == current_user.id  )) ? true : false 
c
Registration.find(match.second_player).user.id
Registration.find(match.first_player).user.id
match
c
params
c
!(current_user.id.to_s == params[:id])
!current_user.admin?
!current_user.admin? || !(current_user.id.to_s == params[:id])
c
!current_user.admin? || !(current_user.id.to_s == params[:id])
current_user.admin? || current_user.id.to_s == params[:id]
c
params
c
match.date&.strftime('%d-%m-%Y %H:%M')
match
match.id
c
match.id
c
match.id
c
match.errors
match.erros
c
match.errors
c
@duels
c
@duels
c
@duels
c
@duels
c
current_user
opponent
	@duels
c
params
debugger
c
Registration
params[:level]
params
c
team_is_existed = (Registration.find_by(tournament: tournament, user_id: current_user.id) rescue false) || (Registration.find_by(tournament: tournament, user_id: @teammate.id) rescue false) || (Registration.find_by(tournament: tournament, teammate_id: @teammate.id) rescue false) || (Registration.find_by(tournament: tournament, teammate_id: current_user.id) rescue false)
Registration.find
Registration
Registration.find(tournament_id: 107, teammate_id: current_user.id)
